[{"/Users/shashankkota/Desktop/create-block/quora-clone/src/index.js":"1","/Users/shashankkota/Desktop/create-block/quora-clone/src/App.js":"2","/Users/shashankkota/Desktop/create-block/quora-clone/src/serviceWorker.js":"3","/Users/shashankkota/Desktop/create-block/quora-clone/src/app/store.js":"4","/Users/shashankkota/Desktop/create-block/quora-clone/src/firebase.js":"5","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Quora.js":"6","/Users/shashankkota/Desktop/create-block/quora-clone/src/features/userSlice.js":"7","/Users/shashankkota/Desktop/create-block/quora-clone/src/features/questionSlice.js":"8","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/auth/Login.js":"9","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/filter.js":"10","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Feed.js":"11","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Widget.js":"12","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Sidebar.js":"13","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/QHeader.js":"14","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/QuorBox.js":"15","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Post.js":"16","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/WidgetContent.js":"17","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/SidebarOptions.js":"18","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/SidebarOption.js":"19","/Users/shashankkota/Desktop/create-block/quora-clone/src/util/sidebar_map.js":"20","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/ExpandedPost.js":"21","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/LargePost.js":"22","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/Comments.js":"23","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/PreviousPosts.js":"24","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Form/Form.js":"25","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Form/QandA.js":"26"},{"size":623,"mtime":1649806194996,"results":"27","hashOfConfig":"28"},{"size":1380,"mtime":1651023602133,"results":"29","hashOfConfig":"28"},{"size":5004,"mtime":1649806194996,"results":"30","hashOfConfig":"28"},{"size":266,"mtime":1649806194991,"results":"31","hashOfConfig":"28"},{"size":707,"mtime":1650570357592,"results":"32","hashOfConfig":"28"},{"size":618,"mtime":1649806194993,"results":"33","hashOfConfig":"28"},{"size":440,"mtime":1649806194995,"results":"34","hashOfConfig":"28"},{"size":604,"mtime":1649806194995,"results":"35","hashOfConfig":"28"},{"size":4066,"mtime":1650571714727,"results":"36","hashOfConfig":"28"},{"size":83,"mtime":1650752066676,"results":"37","hashOfConfig":"28"},{"size":1142,"mtime":1650761257136,"results":"38","hashOfConfig":"28"},{"size":357,"mtime":1650571714725,"results":"39","hashOfConfig":"28"},{"size":245,"mtime":1649806194993,"results":"40","hashOfConfig":"28"},{"size":6807,"mtime":1651013326044,"results":"41","hashOfConfig":"28"},{"size":877,"mtime":1649806194993,"results":"42","hashOfConfig":"28"},{"size":6411,"mtime":1650775386170,"results":"43","hashOfConfig":"28"},{"size":2490,"mtime":1649806194994,"results":"44","hashOfConfig":"28"},{"size":607,"mtime":1650751586858,"results":"45","hashOfConfig":"28"},{"size":526,"mtime":1650588992139,"results":"46","hashOfConfig":"28"},{"size":203,"mtime":1650751945362,"results":"47","hashOfConfig":"28"},{"size":845,"mtime":1650776921628,"results":"48","hashOfConfig":"28"},{"size":879,"mtime":1650771239735,"results":"49","hashOfConfig":"28"},{"size":3018,"mtime":1651024527505,"results":"50","hashOfConfig":"28"},{"size":890,"mtime":1650771329361,"results":"51","hashOfConfig":"28"},{"size":655,"mtime":1651025160668,"results":"52","hashOfConfig":"28"},{"size":260,"mtime":1651024122733,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"momg6s",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shashankkota/Desktop/create-block/quora-clone/src/index.js",[],["117","118"],"/Users/shashankkota/Desktop/create-block/quora-clone/src/App.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/serviceWorker.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/app/store.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/firebase.js",["119"],"import firebase from \"firebase\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDdYiozQo2y_ECs7RsZg-2OsqHAtURTeqs\",\n  authDomain: \"creative-block-5e3bb.firebaseapp.com\",\n  projectId: \"creative-block-5e3bb\",\n  storageBucket: \"creative-block-5e3bb.appspot.com\",\n  messagingSenderId: \"732218817574\",\n  appId: \"1:732218817574:web:97ef874e3be7ec24213ae7\",\n  measurementId: \"G-BRQRJWX5YG\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst db = firebaseApp.firestore();\nconst storage = firebase.storage();\n\n\nexport { auth, provider, storage };\nexport default db;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Quora.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/features/userSlice.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/features/questionSlice.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/auth/Login.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/filter.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Feed.js",["120","121","122","123"],"import React, { useEffect, useState, useContext } from \"react\";\nimport QuorBox from \"./QuorBox\";\nimport \"./Feed.css\";\nimport Post from \"./Post\";\nimport db from \"../firebase\";\nimport { FilterContext } from \"./filter.js\";\n\n\nfunction Feed() {\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useContext(FilterContext);\n\n\n  useEffect(() => {\n    db.collection(\"content\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            questions: doc.data(),\n          }))\n        )\n    ); \n  }, []);\n\n  return (\n    <div className=\"feed\">\n      {posts.map(({ id, questions }) => (\n            filter.toLowerCase() == \"all\" || questions.tag == filter ? <Post\n              key={id}\n              Id={id}\n              tag={questions.tag}\n              question={questions.question}\n              content={questions.content}\n              imageUrl={questions.image}\n              timestamp={questions.timestamp}\n              users={questions.user} \n          /> : null\n      ))}\n      \n    </div>\n  );\n}\n\nexport default Feed;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Widget.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Sidebar.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/QHeader.js",["124","125","126","127"],"import React, { useState, useCallback } from \"react\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport FeaturedPlayListOutlinedIcon from \"@material-ui/icons/FeaturedPlayListOutlined\";\nimport AssignmentTurnedInOutlinedIcon from \"@material-ui/icons/AssignmentTurnedInOutlined\";\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\nimport NotificationsOutlinedIcon from \"@material-ui/icons/NotificationsOutlined\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport Modal from \"react-modal\";\nimport tagMap from \"../util/sidebar_map\";\nimport {useHistory} from 'react-router-dom';\n\nimport \"./QHeader.css\";\nimport { Avatar, Button, Input } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db, { auth } from \"../firebase\";\nimport { storage } from \"../firebase\";\nimport { ExpandMore, Link } from \"@material-ui/icons\";\nimport firebase from \"firebase\";\n\nModal.setAppElement(\"#root\");\n\nfunction QHeader() {\n  const user = useSelector(selectUser);\n\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const [inputUrl, setInputUrl] = useState(\"\");\n  const [inputTag, setInputTag] = useState(\"\");\n  const [inputContent, setInputContent] = useState(\"\");\n  const [image , setImage] = useState(null);\n  const uploadedImage = React.useRef(null);\n\n  const questionName = input;\n\n  const history = useHistory();\n  const onHomeClick = useCallback(() => history.push('/'));\n\n  const handleQuestion = async (e) => {\n\n    e.preventDefault();\n    setIsModalOpen(false);\n\n\n    if(image != null) {\n  \n        const storageRef = storage.ref();\n        const imageRef = storageRef.child(image.name);\n        await imageRef.put(image);\n\n      \n        db.collection(\"content\").add({\n          user: user,\n          question: input,\n          tag: inputTag,\n          content: inputContent,\n          image: await imageRef.getDownloadURL(),\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n            \n\n    } else {\n      if (questionName) {\n        db.collection(\"content\").add({\n          user: user,\n          question: input,\n          tag: inputTag,\n          content: inputContent,\n          image: null,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n      }\n  \n    }\n\n\n    setInput(\"\");\n    setInputUrl(\"\");\n    setInputTag(\"\");\n    setInputContent(\"\");\n    setImage(null);\n  };\n\n  return (\n    <div className=\"qHeader\">\n      <div className=\"qHeader__logo\">\n        <img\n          src=\"http://localhost:3000/sorin_logo.png\"\n          alt=\"LogoNotFound\"\n          onClick={onHomeClick}\n        />\n      </div>\n      <div className=\"qHeader__icons\">\n        <div className=\"active qHeader__icon\">\n          <HomeIcon onClick={onHomeClick}/>\n        </div>\n        <div className=\"qHeader__icon\">\n          <FeaturedPlayListOutlinedIcon />\n        </div>\n        <div className=\"qHeader__icon\">\n          <AssignmentTurnedInOutlinedIcon />\n        </div>\n        <div className=\"qHeader__icon\">\n          <PeopleAltOutlinedIcon />\n        </div>\n        <div className=\"qHeader__icon\">\n          <NotificationsOutlinedIcon />\n        </div>\n      </div>\n      <div className=\"qHeader__input\">\n        <SearchIcon />\n        <input type=\"text\" placeholder=\"Search\" />\n      </div>\n      <div className=\"qHeader__Rem\">\n        <div className=\"qHeader__avatar\">\n          <Avatar\n            onClick={() => auth.signOut()}\n            className=\"Avatar\"\n            src={\n              user.photo\n                ? user.photo\n                : \"https://res.cloudinary.com/startup-grind/image/upload/c_fill,dpr_2.0,f_auto,g_center,h_250,q_auto:good,w_250/v1/gcs/platform-data-twilio/contentbuilder/Avatar.png\"\n            }\n          />\n        </div>\n        <LanguageIcon />\n        <Button className=\"post_button\" onClick={() => setIsModalOpen(true)}>Post Content</Button>\n        <Modal\n          isOpen={IsmodalOpen}\n          onRequestClose={() => setIsModalOpen(false)}\n          shouldCloseOnOverlayClick={false}\n          style={{\n            overlay: {\n              width: 700,\n              height: 600,\n              backgroundColor: \"rgba(0,0,0,0.8)\",\n              zIndex: \"1000\",\n              top: \"50%\",\n              left: \"50%\",\n              marginTop: \"-300px\",\n              marginLeft: \"-350px\",\n            },\n          }}\n        >\n          <div className=\"modal__title\">\n            <h5>Add Question</h5>\n          </div>\n          <div className=\"modal__info\">\n            <Avatar\n              className=\"avatar\"\n              src={\n                user.photo\n                  ? user.photo\n                  : \"https://res.cloudinary.com/startup-grind/image/upload/c_fill,dpr_2.0,f_auto,g_center,h_250,q_auto:good,w_250/v1/gcs/platform-data-twilio/contentbuilder/Avatar.png\"\n              }\n            />\n            <p>{user.disPlayName ? user.disPlayName : user.email} asked</p>\n            <div className=\"modal__scope\">\n              <PeopleAltOutlinedIcon />\n              <p>Public</p>\n              <ExpandMore />\n            </div>\n          </div>\n          <div className=\"modal__Field\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              type=\"text\"\n              placeholder=\"Title your progress\"\n            />\n            <div className=\"modal__fieldLink\">\n              <textarea id=\"progress\" rows=\"15\" onChange={(e) => setInputContent(e.target.value)}></textarea>\n            </div>\n          </div>\n          <div className=\"modal__buttons\">\n            <select name=\"Categories\" id=\"selectList\" onChange={(e) => setInputTag(e.target.value)}>\n            {Object.keys(tagMap).map((key) => (\n                <option value={key}> {key} </option>\n              ))}\n              <option value=\"Visual Arts\">Visual Arts</option>\n              <option value=\"Writing\">Writing</option>\n              <option value=\"Film\">Film </option>\n              <option value=\"Music\">Music</option>\n            </select>\n            <input type=\"file\" accept=\"image/*\" multiple = {false} onChange={(e) => setImage(e.target.files[0])} />\n            <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\n              Cancel\n            </button>\n            <button type=\"sumbit\" onClick={handleQuestion} className=\"add\">\n              Add Question\n            </button>\n          </div>\n          <img\n          ref={uploadedImage}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"absolute\"\n          }}\n        />\n        </Modal>\n\n      </div>\n    </div>\n  );\n}\n\nexport default QHeader;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/QuorBox.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Post.js",["128","129","130","131","132"],"import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport {useHistory} from 'react-router-dom';\nimport \"./Post.css\";\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\nimport { MoreHorizOutlined, ShareOutlined } from \"@material-ui/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport Modal from \"react-modal\";\nimport db from \"../firebase\";\nimport { selectQuestionId, setQuestionInfo } from \"../features/questionSlice\";\nimport firebase from \"firebase\";\nimport tagMap from \"../util/sidebar_map\";\n\n\nfunction Post({ Id, tag, question, content, imageUrl, timestamp, users }) {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const [IsmodalOpen, setIsModalOpen] = useState(false);\n  const questionId = useSelector(selectQuestionId);\n  const [answer, setAnswer] = useState(\"\");\n  const [getAnswers, setGetAnswers] = useState([]);\n\n  const history = useHistory();\n  const onPostClick = useCallback(() => history.push('/post', { id: Id, question: question, tag: tag, content: content, imageUrl: imageUrl, userEmail: users.email }));\n\n  const getName = (email) => { return email.substring(0, email.indexOf('@')) }\n\n  useEffect(() => {\n    if (questionId) {\n      db.collection(\"content\")\n        .doc(questionId)\n        .collection(\"answer\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setGetAnswers(\n            snapshot.docs.map((doc) => ({ id: doc.id, answers: doc.data() }))\n          )\n        );\n    }\n  }, [questionId]);\n\n\n  const handleAnswer = (e) => {\n    e.preventDefault();\n\n    if (questionId) {\n      db.collection(\"content\").doc(questionId).collection(\"answer\").add({\n        user: user,\n        answer: answer,\n        questionId: questionId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    }\n    console.log(questionId);\n    setAnswer(\"\");\n    setIsModalOpen(false);\n  };\n  return (\n    <div\n      className=\"post\"\n      onClick={onPostClick}\n    >\n      <div className=\"post__info\">\n        <Avatar\n          src={\n            users.photo\n              ? users.photo\n              : \"https://res.cloudinary.com/startup-grind/image/upload/c_fill,dpr_2.0,f_auto,g_center,h_250,q_auto:good,w_250/v1/gcs/platform-data-twilio/contentbuilder/Avatar.png\"\n          }\n        />\n        <h4>{getName(users.email)}</h4>\n        <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\n        <div className=\"tag__footer\">\n          <p className=\"tag\">{tagMap[tag]}</p>\n        </div>\n      </div>\n      <div className=\"post__body\">\n        <div className=\"post__question\">\n          <p>{question}</p>\n\n          <button\n            onClick={() => setIsModalOpen(true)}\n            className=\"post__btnAnswer\">\n            Answer\n          </button>\n          <Modal\n            isOpen={IsmodalOpen}\n            onRequestClose={() => setIsModalOpen(false)}\n            shouldCloseOnOverlayClick={false}\n            style={{\n              overlay: {\n                width: 680,\n                height: 550,\n                backgroundColor: \"rgba(0,0,0,0.8)\",\n                zIndex: \"1000\",\n                top: \"50%\",\n                left: \"50%\",\n                marginTop: \"-250px\",\n                marginLeft: \"-350px\",\n              },\n            }}\n          >\n            <div className=\"modal__question\">\n              <h1>{question}</h1>\n              <p>\n                asked by{\" \"}\n                <span className=\"name\">\n                  {users.displayName ? users.displayName : users.email}\n                </span>{\" \"}\n                {\"\"}\n                on{\" \"}\n                <span className=\"name\">\n                  {new Date(timestamp?.toDate()).toLocaleString()}\n                </span>\n              </p>\n            </div>\n            <div className=\"modal__answer\">\n              <textarea\n                value={answer}\n                onChange={(e) => setAnswer(e.target.value)}\n                placeholder=\"Enter Your Answer\"\n                type=\"text\"\n              />\n            </div>\n            <div className=\"modal__button\">\n              <button className=\"cancle\" onClick={() => setIsModalOpen(false)}>\n                Cancel\n              </button>\n              <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\n                Add Answer\n              </button>\n            </div>\n          </Modal>\n        </div>\n        {/* <div className=\"post__answer\">\n          {getAnswers.map(({ id, answers }) => (\n            <p key={id} style={{ position: \"relative\", paddingBottom: \"5px\" }}>\n              {Id === answers.questionId ? (\n                <span>\n                  {answers.answer}\n                  <br />\n                  <span\n                    style={{\n                      position: \"absolute\",\n                      color: \"gray\",\n                      fontSize: \"small\",\n                      display: \"flex\",\n                      right: \"0px\",\n                    }}\n                  >\n                    <span style={{ color: \"#b92b27\" }}>\n                      {answers.user.displayName\n                        ? answers.user.displayName\n                        : answers.user.email}{\" \"}\n                      on{\" \"}\n                      {new Date(answers.timestamp?.toDate()).toLocaleString()}\n                    </span>\n                  </span>\n                </span>\n              ) : (\n                \"\"\n              )}\n            </p>\n          ))}\n        </div> */}\n        <img src={imageUrl} alt=\"\" />\n      </div>\n      <div className=\"post__footer\">\n        <div className=\"post__footerAction\">\n          <ArrowUpwardOutlinedIcon />\n          <ArrowDownwardOutlinedIcon />\n        </div>\n\n        <div className=\"comments__footer\">\n          <ChatBubbleOutlineOutlinedIcon />\n        </div>\n        <p className=\"content\">{content}</p>\n        <div className=\"post__footerLeft\">\n          <ShareOutlined />\n          <MoreHorizOutlined />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/WidgetContent.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/SidebarOptions.js",["133","134","135","136"],"import { Add } from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\nimport \"../util/sidebar_map\";\nimport \"./SidebarOption.css\";\nimport SidebarOption from \"./SidebarOption\";\nimport tagMap from \"../util/sidebar_map\";\n\n\nfunction SidebarOptions() {\n\n\n  const [input, setInput] = useState(\"all\");\n\n  const callback = (title) => {\n    console.log(title);\n    this.setInput(title);\n  }\n\n\n  return (\n    <div className=\"sidebarOptions\">\n      {Object.keys(tagMap).map((key) => (\n         <SidebarOption src={tagMap[key]} title={key} />\n       ))}\n    </div>\n\n  )\n  \n}\n\nexport default SidebarOptions;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/SidebarOption.js",["137","138","139"],"import { Add } from \"@material-ui/icons\";\nimport React, { useContext, useState } from \"react\";\nimport { FilterContext } from \"./filter.js\";\nimport \"./SidebarOption.css\";\n\n\n\n\nfunction SidebarOption({ src, title}) {\n  const [filter, setFilter] = useContext(FilterContext);\n  return (\n      <div className=\"sidebarOption\"\n            onClick={() => setFilter(title)}>\n              <h2>\n                {src}\n              </h2>\n        <p className=\"sidebar_title\">{title}</p>\n      </div>\n  );\n}\n\nexport default SidebarOption;\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/util/sidebar_map.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/ExpandedPost.js",["140"],"import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./ExpandedPost.css\";\nimport QHeader from \"../QHeader\";\nimport LargePost from \"./LargePost.js\"\nimport Comments from \"./Comments.js\"\n\nfunction ExpandedPost() {\n\n  const location = useLocation();\n\n  return (\n    <div className=\"expanded_post\">\n        <QHeader />\n        <div className=\"post_content\">\n            <LargePost \n              imageUrl={location.state.imageUrl}\n              tag={location.state.tag}\n              question={location.state.question}\n              content={location.state.content}\n              userEmail={location.state.userEmail}/>\n            <Comments\n              userEmail={location.state.userEmail}\n              id={location.state.id} />\n        </div>\n        \n\n    </div>\n  );\n}\n\nexport default ExpandedPost;\n\n","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/LargePost.js",["141","142"],"import React, { useState } from \"react\";\nimport \"./LargePost.css\"\nimport tagMap from \"../../util/sidebar_map\"\nimport PreviousPosts from \"./PreviousPosts\"\n\n\nfunction LargePost({imageUrl, question, content, tag, userEmail}) {\n\n    const getName = (email) => { return email.substring(0, email.indexOf('@')) }\n\n    return (\n        <div className=\"large_post\">\n            <h1 className=\"lp_title\"><b>{question}</b>{\" by \" + getName(userEmail)}</h1>\n            <div className=\"lp_info\">\n                <h3 className=\"lp_tag\">Tags:<span className=\"tag\">{tagMap[tag]}</span></h3>\n            </div>\n            <img className=\"lp_img\" src={imageUrl} />\n            <p className=\"lp_content\">{content}</p>\n            <div className=\"past_progress\">\n                <PreviousPosts userEmail={userEmail} tag={tag}/>\n            </div>\n        </div>\n    )\n\n}\n\nexport default LargePost;","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/Comments.js",["143","144"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./Comments.css\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport db from \"../../firebase\"\nimport firebase from \"firebase\"\nimport { selectQuestionId, setQuestionInfo } from \"../../features/questionSlice\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction Comments({userEmail, id}) {\n\n    const [getAnswers, setGetAnswers] = useState([]);\n    const [answer, setAnswer] = useState('');\n    \n    const history = useHistory();\n    const onCollaborateClick = useCallback(() => history.push('/collaborate', { header: \"Request to Collaborate\" ,\n                                                                                questions: [\"Why would you like to join this project?\",\n                                                                                            \"What skills can you contribute to this project?\",\n                                                                                            \"What experience do you have?\"]}));\n\n    const dispatch = useDispatch();\n\n    const getName = (email) => { return email.substring(0, email.indexOf('@')) }\n    dispatch(\n        setQuestionInfo({\n            questionId: id,\n            questionName: id,\n        })\n    )\n    const questionId = useSelector(selectQuestionId);\n    \n    const handleAnswer = (e) => {\n        e.preventDefault();\n    \n        if (id) {\n          db.collection(\"content\").doc(id).collection(\"answer\").add({\n            user: userEmail,\n            answer: answer,\n            questionId: id,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          });\n        }\n        console.log(questionId);\n        setAnswer(\"\");\n      };\n\n    useEffect(() => {\n          db.collection(\"content\")\n            .doc(id)\n            .collection(\"answer\")\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) =>\n              setGetAnswers(\n                snapshot.docs.map((doc) => ({ id: doc.id, answers: doc.data() }))\n              )\n            );\n        \n      })\n\n    return (\n        <div className=\"comments\">\n            <h1>Comments</h1>\n\n            <div className=\"user_answer\">\n                <textarea cols={10} placeholder=\"Share your thoughts\" onChange={(e) => setAnswer(e.target.value)}>\n                </textarea>\n                <button onClick={handleAnswer}>submit</button>\n            </div>\n\n            <div className=\"answers\">\n                {getAnswers.map(({ id, answers }) => (\n                    <Answer author={getName(answers.user)} timestamp={answers.timestamp} answer={answers.answer}/>\n                ))}\n            </div>\n\n            <button onClick={onCollaborateClick}>Collaborate</button>\n           \n\n        </div>\n        \n    )\n}\n\nfunction Answer({author, timestamp, answer}) {\n    return (\n    <div className=\"answer\">\n        <p><span className=\"answer_body\">{answer}</span> {\" - \" + author}</p>\n    </div>\n        )\n}\n\nexport default Comments;","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/posts/PreviousPosts.js",["145","146","147","148"],"import React, { useState, useEffect } from \"react\";\nimport \"./PreviousPosts.css\"\nimport tagMap from \"../../util/sidebar_map\"\nimport db from \"../../firebase\";\n\n\nfunction PreviousPosts({userEmail, tag}) {\n\n    \n\n    const [posts, setPosts] = useState([])\n    useEffect(() => {\n        db.collection(\"content\")\n          .orderBy(\"timestamp\", \"desc\")\n          .onSnapshot((snapshot) =>\n            setPosts(\n              snapshot.docs.map((doc) => ({\n                data: doc.data()\n              }))\n            )\n        ); \n      }, []);\n\n    return (\n        <>\n        <h2>Past Progress:</h2>\n        <div className=\"previous_posts\">\n            {posts.map(({data}) =>\n                data.tag == tag && data.user.email == userEmail? \n                    <img src={data.image} /> : null\n                \n            )}\n        </div>\n        </>\n    )\n\n}\n\nexport default PreviousPosts;","/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Form/Form.js",[],"/Users/shashankkota/Desktop/create-block/quora-clone/src/components/Form/QandA.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":20},{"ruleId":"153","severity":1,"message":"157","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":15},{"ruleId":"153","severity":1,"message":"158","line":11,"column":18,"nodeType":"155","messageId":"156","endLine":11,"endColumn":27},{"ruleId":"159","severity":1,"message":"160","line":30,"column":34,"nodeType":"161","messageId":"162","endLine":30,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":30,"column":60,"nodeType":"161","messageId":"162","endLine":30,"endColumn":62},{"ruleId":"153","severity":1,"message":"163","line":19,"column":22,"nodeType":"155","messageId":"156","endLine":19,"endColumn":26},{"ruleId":"153","severity":1,"message":"164","line":29,"column":10,"nodeType":"155","messageId":"156","endLine":29,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":38,"column":23,"nodeType":"155","endLine":38,"endColumn":34},{"ruleId":"167","severity":1,"message":"168","line":194,"column":11,"nodeType":"169","endLine":201,"endColumn":11},{"ruleId":"153","severity":1,"message":"170","line":7,"column":8,"nodeType":"155","messageId":"156","endLine":7,"endColumn":26},{"ruleId":"153","severity":1,"message":"171","line":14,"column":28,"nodeType":"155","messageId":"156","endLine":14,"endColumn":43},{"ruleId":"153","severity":1,"message":"172","line":21,"column":9,"nodeType":"155","messageId":"156","endLine":21,"endColumn":17},{"ruleId":"153","severity":1,"message":"173","line":26,"column":10,"nodeType":"155","messageId":"156","endLine":26,"endColumn":20},{"ruleId":"165","severity":1,"message":"166","line":29,"column":23,"nodeType":"155","endLine":29,"endColumn":34},{"ruleId":"153","severity":1,"message":"174","line":1,"column":10,"nodeType":"155","messageId":"156","endLine":1,"endColumn":13},{"ruleId":"153","severity":1,"message":"175","line":12,"column":10,"nodeType":"155","messageId":"156","endLine":12,"endColumn":15},{"ruleId":"153","severity":1,"message":"176","line":12,"column":17,"nodeType":"155","messageId":"156","endLine":12,"endColumn":25},{"ruleId":"153","severity":1,"message":"177","line":14,"column":9,"nodeType":"155","messageId":"156","endLine":14,"endColumn":17},{"ruleId":"153","severity":1,"message":"174","line":1,"column":10,"nodeType":"155","messageId":"156","endLine":1,"endColumn":13},{"ruleId":"153","severity":1,"message":"178","line":2,"column":29,"nodeType":"155","messageId":"156","endLine":2,"endColumn":37},{"ruleId":"153","severity":1,"message":"179","line":10,"column":10,"nodeType":"155","messageId":"156","endLine":10,"endColumn":16},{"ruleId":"153","severity":1,"message":"178","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":25},{"ruleId":"153","severity":1,"message":"178","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":17,"column":13,"nodeType":"169","endLine":17,"endColumn":54},{"ruleId":"153","severity":1,"message":"163","line":7,"column":10,"nodeType":"155","messageId":"156","endLine":7,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":15,"column":32,"nodeType":"155","endLine":15,"endColumn":43},{"ruleId":"153","severity":1,"message":"180","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":29,"column":26,"nodeType":"161","messageId":"162","endLine":29,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":29,"column":52,"nodeType":"161","messageId":"162","endLine":29,"endColumn":54},{"ruleId":"167","severity":1,"message":"168","line":30,"column":21,"nodeType":"169","endLine":30,"endColumn":45},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'getStorage' is defined but never used.","Identifier","unusedVar","'QuorBox' is defined but never used.","'setFilter' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'inputUrl' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RepeatOutlinedIcon' is defined but never used.","'setQuestionInfo' is defined but never used.","'dispatch' is assigned a value but never used.","'getAnswers' is assigned a value but never used.","'Add' is defined but never used.","'input' is assigned a value but never used.","'setInput' is assigned a value but never used.","'callback' is assigned a value but never used.","'useState' is defined but never used.","'filter' is assigned a value but never used.","'tagMap' is defined but never used.","no-global-assign","no-unsafe-negation"]